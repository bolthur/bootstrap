diff --git Makefile Makefile
index f02aa19..2b06054 100644
--- Makefile
+++ Makefile
@@ -23,7 +23,7 @@ ASSUME_MASK ?= 0
 CPPFLAGS = -I libfdt -I . -DFDT_ASSUME_MASK=$(ASSUME_MASK)
 WARNINGS = -Wall -Wpointer-arith -Wcast-qual -Wnested-externs \
 	-Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Wshadow
-CFLAGS = -g -Os $(SHAREDLIB_CFLAGS) -Werror $(WARNINGS) $(EXTRA_CFLAGS)
+CFLAGS = -g -Os -Werror $(WARNINGS) $(EXTRA_CFLAGS)
 
 BISON = bison
 LEX = flex
@@ -54,12 +54,7 @@ else
 	CFLAGS += $(shell $(PKG_CONFIG) --cflags valgrind)
 endif
 
-NO_YAML := $(shell $(PKG_CONFIG) --exists yaml-0.1; echo $$?)
-ifeq ($(NO_YAML),1)
-	CFLAGS += -DNO_YAML
-else
-	LDLIBS_dtc += $(shell $(PKG_CONFIG) --libs yaml-0.1)
-endif
+LDLIBS_dtc += -lyaml
 
 ifeq ($(HOSTOS),darwin)
 SHAREDLIB_EXT     = dylib
@@ -71,8 +66,8 @@ SHAREDLIB_CFLAGS  =
 SHAREDLIB_LDFLAGS = -shared -Wl,--version-script=$(LIBFDT_version) -Wl,-soname,
 else
 SHAREDLIB_EXT     = so
-SHAREDLIB_CFLAGS  = -fPIC
-SHAREDLIB_LDFLAGS = -fPIC -shared -Wl,--version-script=$(LIBFDT_version) -Wl,-soname,
+SHAREDLIB_CFLAGS  = -fPIC $(EXTRA_CFLAGS)
+SHAREDLIB_LDFLAGS = -fPIC $(EXTRA_CFLAGS) -shared -Wl,--version-script=$(LIBFDT_version) -Wl,-soname,
 endif
 
 #
diff --git checks.c checks.c
index 8acbc05..0e0e61c 100644
--- checks.c
+++ checks.c
@@ -5,6 +5,7 @@
 
 #include "dtc.h"
 #include "srcpos.h"
+#include <inttypes.h>
 
 #ifdef TRACE_CHECKS
 #define TRACE(c, ...) \
@@ -498,7 +499,7 @@ static cell_t check_phandle_prop(struct check *c, struct dt_info *dti,
 	phandle = propval_cell(prop);
 
 	if ((phandle == 0) || (phandle == -1)) {
-		FAIL_PROP(c, dti, node, prop, "bad value (0x%x) in %s property",
+		FAIL_PROP(c, dti, node, prop, "bad value (0x%"PRIx32") in %s property",
 		     phandle, prop->name);
 		return 0;
 	}
@@ -533,7 +534,7 @@ static void check_explicit_phandles(struct check *c, struct dt_info *dti,
 
 	other = get_node_by_phandle(root, phandle);
 	if (other && (other != node)) {
-		FAIL(c, dti, node, "duplicated phandle 0x%x (seen before at %s)",
+		FAIL(c, dti, node, "duplicated phandle 0x%"PRIx32" (seen before at %s)",
 		     phandle, other->fullpath);
 		return;
 	}
@@ -1044,7 +1045,7 @@ static void check_i2c_bus_reg(struct check *c, struct dt_info *dti, struct node
 	}
 
 	reg = fdt32_to_cpu(*cells);
-	snprintf(unit_addr, sizeof(unit_addr), "%x", reg);
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, reg);
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "I2C bus unit address format error, expected \"%s\"",
 		     unit_addr);
@@ -1052,7 +1053,7 @@ static void check_i2c_bus_reg(struct check *c, struct dt_info *dti, struct node
 	for (len = prop->val.len; len > 0; len -= 4) {
 		reg = fdt32_to_cpu(*(cells++));
 		if (reg > 0x3ff)
-			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%x\"",
+			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%"PRIx32"\"",
 				  reg);
 
 	}
@@ -1128,7 +1129,7 @@ static void check_spi_bus_reg(struct check *c, struct dt_info *dti, struct node
 	}
 
 	reg = fdt32_to_cpu(*cells);
-	snprintf(unit_addr, sizeof(unit_addr), "%x", reg);
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, reg);
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "SPI bus unit address format error, expected \"%s\"",
 		     unit_addr);
@@ -1151,7 +1152,7 @@ static void check_unit_address_format(struct check *c, struct dt_info *dti,
 		/* skip over 0x for next test */
 		unitname += 2;
 	}
-	if (unitname[0] == '0' && isxdigit(unitname[1]))
+	if (unitname[0] == '0' && isxdigit(( unsigned char )unitname[1]))
 		FAIL(c, dti, node, "unit name should not have leading 0s");
 }
 WARNING(unit_address_format, check_unit_address_format, NULL,
@@ -1689,7 +1690,7 @@ static void check_graph_reg(struct check *c, struct dt_info *dti,
 		return;
 	}
 
-	snprintf(unit_addr, sizeof(unit_addr), "%x", propval_cell(prop));
+	snprintf(unit_addr, sizeof(unit_addr), "%"PRIx32, propval_cell(prop));
 	if (!streq(unitname, unit_addr))
 		FAIL(c, dti, node, "graph node unit address error, expected \"%s\"",
 		     unit_addr);
diff --git fdtdump.c fdtdump.c
index 9613bef..d9fb374 100644
--- fdtdump.c
+++ fdtdump.c
@@ -217,7 +217,7 @@ int main(int argc, char *argv[])
 		char *p = buf;
 		char *endp = buf + len;
 
-		fdt_set_magic(smagic, FDT_MAGIC);
+		fdt32_st(smagic, FDT_MAGIC);
 
 		/* poor man's memmem */
 		while ((endp - p) >= FDT_MAGIC_SIZE) {
diff --git fdtget.c fdtget.c
index 777582e..f05aaa1 100644
--- fdtget.c
+++ fdtget.c
@@ -15,6 +15,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <inttypes.h>
 
 #include <libfdt.h>
 
@@ -188,7 +189,7 @@ static int list_subnodes(const void *blob, int node)
 			break;
 		default:
 			if (level <= depth)
-				printf("Unknown tag 0x%08X\n", tag);
+				printf("Unknown tag 0x%08"PRIX32"\n", tag);
 			return 1;
 		}
 		node = nextoffset;
diff --git flattree.c flattree.c
index bd6977e..21da8f9 100644
--- flattree.c
+++ flattree.c
@@ -5,6 +5,7 @@
 
 #include "dtc.h"
 #include "srcpos.h"
+#include <inttypes.h>
 
 #define FTF_FULLPATH	0x1
 #define FTF_VARALIGN	0x2
@@ -124,7 +125,7 @@ static void asm_emit_cell(void *e, cell_t val)
 {
 	FILE *f = e;
 
-	fprintf(f, "\t.byte 0x%02x; .byte 0x%02x; .byte 0x%02x; .byte 0x%02x\n",
+	fprintf(f, "\t.byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"; .byte 0x%02"PRIx32"\n",
 		(val >> 24) & 0xff, (val >> 16) & 0xff,
 		(val >> 8) & 0xff, val & 0xff);
 }
@@ -779,7 +780,7 @@ static struct node *unflatten_tree(struct inbuf *dtbuf,
 			break;
 
 		default:
-			die("Invalid opcode word %08x in device tree blob\n",
+			die("Invalid opcode word %08"PRIx32" in device tree blob\n",
 			    val);
 		}
 	} while (val != FDT_END_NODE);
@@ -839,7 +840,7 @@ struct dt_info *dt_from_blob(const char *fname)
 
 	totalsize = fdt32_to_cpu(totalsize_buf);
 	if (totalsize < FDT_V1_SIZE)
-		die("DT blob size (%d) is too small\n", totalsize);
+		die("DT blob size (%"PRId32") is too small\n", totalsize);
 
 	blob = xmalloc(totalsize);
 
@@ -852,7 +853,7 @@ struct dt_info *dt_from_blob(const char *fname)
 
 	while (sizeleft) {
 		if (feof(f))
-			die("EOF before reading %d bytes of DT blob\n",
+			die("EOF before reading %"PRId32" bytes of DT blob\n",
 			    totalsize);
 
 		rc = fread(p, 1, sizeleft, f);
@@ -909,7 +910,7 @@ struct dt_info *dt_from_blob(const char *fname)
 	val = flat_read_word(&dtbuf);
 
 	if (val != FDT_BEGIN_NODE)
-		die("Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08x)\n", val);
+		die("Device tree blob doesn't begin with FDT_BEGIN_NODE (begins with 0x%08"PRIx32")\n", val);
 
 	tree = unflatten_tree(&dtbuf, &strbuf, "", flags);
 
